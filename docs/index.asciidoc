:plugin: mmdb
:type: filter

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== MMDB filter plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

This plugin is similar to, but more general than, the {logstash-ref}/plugins-filters-geoip.html[GeoIP] plugin. Using a tool such as https://github.com/cameronkerrnz/json-to-mmdb[json-to-mmdb], you can take data that's locked inside your IP Address Management tool (eg. a spreadsheet) and create a custom MaxMindDB (MMDB) datafile that you can use with this plugin to enrich your logs, enabling you to do cool things with your internal network ranges, such as:

- enrich an IP with the subnet address or VLAN ID or name
- enrich an IP with extra data that might represent which something significant, such as what type of traffic might be expected from that, or which part of the network it is coming from, such as Datacentre, DMZ, VPN, Wifi, Guest Wifi, Building X, Campus Y, etc.
- locate your private address ranges with coordinates or a geohash

This unlocks the aggregate on really-useful criteria:

- network logs relating to a particular VLAN perhaps?
- which parts of the network are we seeing this error on?
- show me web accesses from our VPN ranges
- are traffic flows still healthy for different parts of the network post-change?
- provides a useful feature for potential real-time machine-learning

You, as the MMDB database creator, are in total control of what goes into the MMDB and which fields you want to extract inside of Logstash. This will very likely require
fairly easy programming, which might involve interacting with a SOAP or REST API, or extracting data from a Spreadsheet; Python is a great tool for this job, but you can
use whatever you are comfortable with.

==== Sample Configuration

A useful Logstash filter configuration would look something like the following:

```
filter {
    mmdb {
        source => "ip"
        target => "ipinfo"
        database => "/path/to/demo.mmdb"
        fields => ["subnet", "name", "vlan_id"]
    }
}
```

Let's assume that you have created a MMDB file using
https://github.com/cameronkerrnz/json-to-mmdb[json-to-mmdb], and the input
for that looked like the following:

```
{
    "schema": {
        "database_type": "demo-network",
        "description": { "en": "Demo network allocations" },
        "ip_version": 4,
        "types": {
            "vlan_id": "uint32",
            "name": "utf8_string",
            "campus": "utf8_string"
        }
    },
    "allocations": [
        {
            "subnet": "10.10.0.0/16",   <--- REQUIRED FIELD
            "name": "Datacenter range",
            "campus": "Head Office"
        },
        {
            "subnet": "10.10.0.0/20",
            "vlan_id": 1,
            "name": "Management interfaces",
            "campus": "Head Office"
        },
        ...
```

Then an event such as the following (expressed as JSON)...

```
{
    "ip":"10.10.1.123",
    "message":"configuration changed"
}
```

...will result in the following output (expressed as JSON)...

```
{
    "ip":"10.10.1.123",
    "ipinfo": {
        "name": "Management interfaces",
        "vlan_id": 1,
        "subnet": "10.10.0.0/20"
    },
    "message":"configuration changed"
}
```

// Format anchors and links to support generated ids for versioning
// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
// Sample link: <<plugins-{type}s-{plugin}-setting_name>>

[id="plugins-{type}s-{plugin}-options"]
==== Example Filter Configuration Options

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-source>> |<<boolean,string>>|Yes
| <<plugins-{type}s-{plugin}-target>> |<<hash,string>>|Yes
| <<plugins-{type}s-{plugin}-database>> |a valid filesystem path|Yes
| <<plugins-{type}s-{plugin}-cache_size>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-fields>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-tag_on_failure>> |<<string,string>>|No
|=======================================================================

[id="plugins-{type}s-{plugin}-source"]
===== `source` 

  * Value type is <<boolean,string>>
  * No default

Which Source field to use as a lookup. Content must contain an IP address that
is usable with the MMDB file you specify.

[id="plugins-{type}s-{plugin}-target"]
===== `target` 

  * Value type is <<hash,string>>
  * No default

Which field, which will be a hash, to write the target attributes into; similar to <<plugins-filters-geoip-target>>

[id="plugins-{type}s-{plugin}-database"]
===== `database` 

  * Value type is a valid filesystem path to a MMDB file
  * No default

Points to the MMDB database you provide.

[id="plugins-{type}s-{plugin}-cache_size"]
===== `cache_size` 

  * Value type is <<number,number>>
  * Default value is `4096` (which is different to <<plugins-filters-geoip-cache_size>>)

Add description here

[id="plugins-{type}s-{plugin}-fields"]
===== `fields` 

  * Value type is <<array,array>>
  * Default value is to return all found attributes

Which fields to return from the lookup.

// The full list of Value Types is here: 
// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html

[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]
